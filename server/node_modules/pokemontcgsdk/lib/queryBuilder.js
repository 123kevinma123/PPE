"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _axios = _interopRequireDefault(require("axios"));
var _qs = _interopRequireDefault(require("qs"));
var _configure = _interopRequireDefault(require("./configure"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const getOptions = () => {
  const options = {
    headers: {}
  };
  if (_configure.default.apiKey) {
    options.headers['X-Api-Key'] = _configure.default.apiKey;
    console.log('API Key:', _configure.default.apiKey); // Log the API key for debugging
  } else {
    console.log('API key is missing!');
  }
  //console.log('Options:', options); // Log the options object for debugging
  return options;
};

// Add a request interceptor
/*_axios.default.interceptors.request.use(request => {
  console.log('Starting Request', request); // Log the entire request object
  return request;
});
*/

const get = (type, args) => {
  const options = getOptions(); // Ensure options are retrieved before the request
  return _axios.default.get(_configure.default.host + "/" + type + (args && '?' + _qs.default.stringify(args)), options)
    .then(response => response.data);
};

const _default = (type) => {
  return {
    find: (id) => {
      const options = getOptions(); // Ensure options are retrieved before the request
      return _axios.default.get(_configure.default.host + "/" + type + "/" + id, options)
        .then(response => response.data.data);
    },
    where: (args) => {
      return get(type, args);
    },
    all: (args, data = []) => {
      const getAll = (type, args) => {
        const page = args.page ? args.page + 1 : 1;
        return get(type, _extends({}, args, { page }))
          .then(response => {
            data.push(...response.data);
            if (!response.totalCount || response.pageSize * response.page >= response.totalCount) {
              return data;
            }
            return getAll(type, _extends({}, args, { page }));
          })
          .catch(error => {
            console.error(error);
          });
      };
      return getAll(type, args);
    }
  };
};

exports["default"] = _default;
module.exports = exports.default;